// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-defaults. DO NOT EDIT.

package pb

import (
	"context"
	"errors"
	"io"

	"google.golang.org/grpc"
)

var (
	_ = errors.New("")
	_ = io.EOF
)

var _ ProtoDBServer = (*proxyProtoDB)(nil)

func NewProtoDBProxy(c ProtoDBClient, opts ...grpc.CallOption) ProtoDBServer {
	return &proxyProtoDB{c: c, opts: opts}
}

type proxyProtoDB struct {
	c    ProtoDBClient
	opts []grpc.CallOption
}

// Get proxies call to backend server
func (x *proxyProtoDB) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return x.c.Get(ctx, req, x.opts...)
}

// Set proxies call to backend server
func (x *proxyProtoDB) Set(ctx context.Context, req *SetRequest) (*SetResponse, error) {
	return x.c.Set(ctx, req, x.opts...)
}

// Delete proxies call to backend server
func (x *proxyProtoDB) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return x.c.Delete(ctx, req, x.opts...)
}

// Tx proxies call to backend server
func (x *proxyProtoDB) Tx(s ProtoDB_TxServer) error {
	cs, err := x.c.Tx(s.Context(), x.opts...)
	if err != nil {
		return err
	}
	errs := make(chan error, 2)
	recv := func() error {
		for {
			req, err := s.Recv()
			if errors.Is(err, io.EOF) {
				return nil
			}
			if err != nil {
				return err
			}
			if err := cs.Send(req); err != nil {
				return err
			}
		}
	}
	send := func() error {
		for {
			res, err := cs.Recv()
			if err != nil {
				return err
			}
			if err := s.Send(res); err != nil {
				return err
			}
		}
	}
	go func() {
		errs <- recv()
	}()
	go func() {
		errs <- send()
	}()
	return <-errs
}

// Watch proxies call to backend server
func (x *proxyProtoDB) Watch(req *WatchRequest, s ProtoDB_WatchServer) error {
	cs, err := x.c.Watch(s.Context(), req, x.opts...)
	if err != nil {
		return err
	}
	for {
		res, err := cs.Recv()
		if err != nil {
			return err
		}
		if err := s.Send(res); err != nil {
			return err
		}
	}
}

// Register proxies call to backend server
func (x *proxyProtoDB) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return x.c.Register(ctx, req, x.opts...)
}

// Descriptors proxies call to backend server
func (x *proxyProtoDB) Descriptors(ctx context.Context, req *DescriptorsRequest) (*DescriptorsResponse, error) {
	return x.c.Descriptors(ctx, req, x.opts...)
}

// FileDescriptors proxies call to backend server
func (x *proxyProtoDB) FileDescriptors(ctx context.Context, req *FileDescriptorsRequest) (*FileDescriptorsResponse, error) {
	return x.c.FileDescriptors(ctx, req, x.opts...)
}

func (x *proxyProtoDB) mustEmbedUnimplementedProtoDBServer() {}
