// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/protodb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProtoDB_Get_FullMethodName             = "/linka.cloud.protodb.ProtoDB/Get"
	ProtoDB_Set_FullMethodName             = "/linka.cloud.protodb.ProtoDB/Set"
	ProtoDB_Delete_FullMethodName          = "/linka.cloud.protodb.ProtoDB/Delete"
	ProtoDB_Tx_FullMethodName              = "/linka.cloud.protodb.ProtoDB/Tx"
	ProtoDB_NextSeq_FullMethodName         = "/linka.cloud.protodb.ProtoDB/NextSeq"
	ProtoDB_Watch_FullMethodName           = "/linka.cloud.protodb.ProtoDB/Watch"
	ProtoDB_Register_FullMethodName        = "/linka.cloud.protodb.ProtoDB/Register"
	ProtoDB_Descriptors_FullMethodName     = "/linka.cloud.protodb.ProtoDB/Descriptors"
	ProtoDB_FileDescriptors_FullMethodName = "/linka.cloud.protodb.ProtoDB/FileDescriptors"
)

// ProtoDBClient is the client API for ProtoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoDBClient interface {
	// Get returns a list of results for the given search.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Set store the given Message in the Database applying the given field mask.
	// It returns the stored message.
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	// Delete deletes the given Message.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Tx creates a transaction.
	Tx(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TxRequest, TxResponse], error)
	// NextSeq returns the next sequence number for the given key.
	NextSeq(ctx context.Context, in *NextSeqRequest, opts ...grpc.CallOption) (*NextSeqResponse, error)
	// Watch returns a stream of events for the given search.
	// A first empty event is sent to indicate that the watch is ready.
	// This is needed by clients that cannot create a stream before receiving
	// a first message from the server, e.g. rust's tonic.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchEvent], error)
	// Register registers the given file descriptor.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Descriptors returns the current schema Descriptors.
	Descriptors(ctx context.Context, in *DescriptorsRequest, opts ...grpc.CallOption) (*DescriptorsResponse, error)
	// FileDescriptors returns the current schema FileDescriptors.
	FileDescriptors(ctx context.Context, in *FileDescriptorsRequest, opts ...grpc.CallOption) (*FileDescriptorsResponse, error)
}

type protoDBClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoDBClient(cc grpc.ClientConnInterface) ProtoDBClient {
	return &protoDBClient{cc}
}

func (c *protoDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ProtoDB_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, ProtoDB_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ProtoDB_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Tx(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TxRequest, TxResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProtoDB_ServiceDesc.Streams[0], ProtoDB_Tx_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxRequest, TxResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProtoDB_TxClient = grpc.BidiStreamingClient[TxRequest, TxResponse]

func (c *protoDBClient) NextSeq(ctx context.Context, in *NextSeqRequest, opts ...grpc.CallOption) (*NextSeqResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextSeqResponse)
	err := c.cc.Invoke(ctx, ProtoDB_NextSeq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProtoDB_ServiceDesc.Streams[1], ProtoDB_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRequest, WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProtoDB_WatchClient = grpc.ServerStreamingClient[WatchEvent]

func (c *protoDBClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ProtoDB_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Descriptors(ctx context.Context, in *DescriptorsRequest, opts ...grpc.CallOption) (*DescriptorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescriptorsResponse)
	err := c.cc.Invoke(ctx, ProtoDB_Descriptors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) FileDescriptors(ctx context.Context, in *FileDescriptorsRequest, opts ...grpc.CallOption) (*FileDescriptorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDescriptorsResponse)
	err := c.cc.Invoke(ctx, ProtoDB_FileDescriptors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoDBServer is the server API for ProtoDB service.
// All implementations must embed UnimplementedProtoDBServer
// for forward compatibility.
type ProtoDBServer interface {
	// Get returns a list of results for the given search.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Set store the given Message in the Database applying the given field mask.
	// It returns the stored message.
	Set(context.Context, *SetRequest) (*SetResponse, error)
	// Delete deletes the given Message.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Tx creates a transaction.
	Tx(grpc.BidiStreamingServer[TxRequest, TxResponse]) error
	// NextSeq returns the next sequence number for the given key.
	NextSeq(context.Context, *NextSeqRequest) (*NextSeqResponse, error)
	// Watch returns a stream of events for the given search.
	// A first empty event is sent to indicate that the watch is ready.
	// This is needed by clients that cannot create a stream before receiving
	// a first message from the server, e.g. rust's tonic.
	Watch(*WatchRequest, grpc.ServerStreamingServer[WatchEvent]) error
	// Register registers the given file descriptor.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Descriptors returns the current schema Descriptors.
	Descriptors(context.Context, *DescriptorsRequest) (*DescriptorsResponse, error)
	// FileDescriptors returns the current schema FileDescriptors.
	FileDescriptors(context.Context, *FileDescriptorsRequest) (*FileDescriptorsResponse, error)
	mustEmbedUnimplementedProtoDBServer()
}

// UnimplementedProtoDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProtoDBServer struct{}

func (UnimplementedProtoDBServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProtoDBServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedProtoDBServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProtoDBServer) Tx(grpc.BidiStreamingServer[TxRequest, TxResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Tx not implemented")
}
func (UnimplementedProtoDBServer) NextSeq(context.Context, *NextSeqRequest) (*NextSeqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSeq not implemented")
}
func (UnimplementedProtoDBServer) Watch(*WatchRequest, grpc.ServerStreamingServer[WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedProtoDBServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedProtoDBServer) Descriptors(context.Context, *DescriptorsRequest) (*DescriptorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Descriptors not implemented")
}
func (UnimplementedProtoDBServer) FileDescriptors(context.Context, *FileDescriptorsRequest) (*FileDescriptorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDescriptors not implemented")
}
func (UnimplementedProtoDBServer) mustEmbedUnimplementedProtoDBServer() {}
func (UnimplementedProtoDBServer) testEmbeddedByValue()                 {}

// UnsafeProtoDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoDBServer will
// result in compilation errors.
type UnsafeProtoDBServer interface {
	mustEmbedUnimplementedProtoDBServer()
}

func RegisterProtoDBServer(s grpc.ServiceRegistrar, srv ProtoDBServer) {
	// If the following call pancis, it indicates UnimplementedProtoDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProtoDB_ServiceDesc, srv)
}

func _ProtoDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Tx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtoDBServer).Tx(&grpc.GenericServerStream[TxRequest, TxResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProtoDB_TxServer = grpc.BidiStreamingServer[TxRequest, TxResponse]

func _ProtoDB_NextSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).NextSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_NextSeq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).NextSeq(ctx, req.(*NextSeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoDBServer).Watch(m, &grpc.GenericServerStream[WatchRequest, WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProtoDB_WatchServer = grpc.ServerStreamingServer[WatchEvent]

func _ProtoDB_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Descriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Descriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_Descriptors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Descriptors(ctx, req.(*DescriptorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_FileDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDescriptorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).FileDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoDB_FileDescriptors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).FileDescriptors(ctx, req.(*FileDescriptorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoDB_ServiceDesc is the grpc.ServiceDesc for ProtoDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linka.cloud.protodb.ProtoDB",
	HandlerType: (*ProtoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProtoDB_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ProtoDB_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProtoDB_Delete_Handler,
		},
		{
			MethodName: "NextSeq",
			Handler:    _ProtoDB_NextSeq_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ProtoDB_Register_Handler,
		},
		{
			MethodName: "Descriptors",
			Handler:    _ProtoDB_Descriptors_Handler,
		},
		{
			MethodName: "FileDescriptors",
			Handler:    _ProtoDB_FileDescriptors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tx",
			Handler:       _ProtoDB_Tx_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _ProtoDB_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/protodb.proto",
}
