// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoDBClient is the client API for ProtoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoDBClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Tx(ctx context.Context, opts ...grpc.CallOption) (ProtoDB_TxClient, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (ProtoDB_WatchClient, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type protoDBClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoDBClient(cc grpc.ClientConnInterface) ProtoDBClient {
	return &protoDBClient{cc}
}

func (c *protoDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/protodb.ProtoDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/protodb.ProtoDB/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/protodb.ProtoDB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoDBClient) Tx(ctx context.Context, opts ...grpc.CallOption) (ProtoDB_TxClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoDB_ServiceDesc.Streams[0], "/protodb.ProtoDB/Tx", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoDBTxClient{stream}
	return x, nil
}

type ProtoDB_TxClient interface {
	Send(*TxRequest) error
	Recv() (*TxResponse, error)
	grpc.ClientStream
}

type protoDBTxClient struct {
	grpc.ClientStream
}

func (x *protoDBTxClient) Send(m *TxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protoDBTxClient) Recv() (*TxResponse, error) {
	m := new(TxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoDBClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (ProtoDB_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoDB_ServiceDesc.Streams[1], "/protodb.ProtoDB/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoDBWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoDB_WatchClient interface {
	Recv() (*WatchEvent, error)
	grpc.ClientStream
}

type protoDBWatchClient struct {
	grpc.ClientStream
}

func (x *protoDBWatchClient) Recv() (*WatchEvent, error) {
	m := new(WatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoDBClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/protodb.ProtoDB/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoDBServer is the server API for ProtoDB service.
// All implementations must embed UnimplementedProtoDBServer
// for forward compatibility
type ProtoDBServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Tx(ProtoDB_TxServer) error
	Watch(*WatchRequest, ProtoDB_WatchServer) error
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedProtoDBServer()
}

// UnimplementedProtoDBServer must be embedded to have forward compatible implementations.
type UnimplementedProtoDBServer struct {
}

func (UnimplementedProtoDBServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProtoDBServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedProtoDBServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProtoDBServer) Tx(ProtoDB_TxServer) error {
	return status.Errorf(codes.Unimplemented, "method Tx not implemented")
}
func (UnimplementedProtoDBServer) Watch(*WatchRequest, ProtoDB_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedProtoDBServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedProtoDBServer) mustEmbedUnimplementedProtoDBServer() {}

// UnsafeProtoDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoDBServer will
// result in compilation errors.
type UnsafeProtoDBServer interface {
	mustEmbedUnimplementedProtoDBServer()
}

func RegisterProtoDBServer(s grpc.ServiceRegistrar, srv ProtoDBServer) {
	s.RegisterService(&ProtoDB_ServiceDesc, srv)
}

func _ProtoDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.ProtoDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.ProtoDB/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.ProtoDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoDB_Tx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtoDBServer).Tx(&protoDBTxServer{stream})
}

type ProtoDB_TxServer interface {
	Send(*TxResponse) error
	Recv() (*TxRequest, error)
	grpc.ServerStream
}

type protoDBTxServer struct {
	grpc.ServerStream
}

func (x *protoDBTxServer) Send(m *TxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protoDBTxServer) Recv() (*TxRequest, error) {
	m := new(TxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProtoDB_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoDBServer).Watch(m, &protoDBWatchServer{stream})
}

type ProtoDB_WatchServer interface {
	Send(*WatchEvent) error
	grpc.ServerStream
}

type protoDBWatchServer struct {
	grpc.ServerStream
}

func (x *protoDBWatchServer) Send(m *WatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtoDB_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoDBServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodb.ProtoDB/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoDBServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoDB_ServiceDesc is the grpc.ServiceDesc for ProtoDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protodb.ProtoDB",
	HandlerType: (*ProtoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProtoDB_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ProtoDB_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProtoDB_Delete_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ProtoDB_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tx",
			Handler:       _ProtoDB_Tx_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _ProtoDB_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/protodb.proto",
}
