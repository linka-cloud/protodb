// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package linka.cloud.protodb;

option csharp_namespace = "LinkaCloud.ProtoDB";
option java_package = "cloud.linka.protodb";
option java_outer_classname = "ProtoDB";
option java_multiple_files = true;
option objc_class_prefix = "LKPDB";
option go_package = "go.linka.cloud/protodb/pb;pb";
option cc_enable_arenas = true;

import "patch/go.proto";
import "validate/validate.proto";

import "filters/field_filter.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";

option (go.lint).all = true;


service ProtoDB {
  // Get returns a list of results for the given search.
  rpc Get(GetRequest) returns (GetResponse);
  // Set store the given Message in the Database applying the given field mask.
  // It returns the stored message.
  rpc Set(SetRequest) returns (SetResponse);
  // Delete deletes the given Message.
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  // Tx creates a transaction.
  rpc Tx(stream TxRequest) returns (stream TxResponse);
  // NextSeq returns the next sequence number for the given key.
  rpc NextSeq(NextSeqRequest) returns (NextSeqResponse);
  // Watch returns a stream of events for the given search.
  // A first empty event is sent to indicate that the watch is ready.
  // This is needed by clients that cannot create a stream before receiving
  // a first message from the server, e.g. rust's tonic.
  rpc Watch(WatchRequest) returns (stream WatchEvent);

  // Register registers the given file descriptor.
  rpc Register(RegisterRequest) returns (RegisterResponse);
  // Descriptors returns the current schema Descriptors.
  rpc Descriptors(DescriptorsRequest) returns (DescriptorsResponse);
  // FileDescriptors returns the current schema FileDescriptors.
  rpc FileDescriptors(FileDescriptorsRequest) returns (FileDescriptorsResponse);
}


message SetRequest {
  google.protobuf.Any payload = 1 [(validate.rules).any = {required: true}];
  google.protobuf.Duration ttl = 2;
  google.protobuf.FieldMask field_mask = 3;
}

message SetResponse {
  google.protobuf.Any result = 1;
}

message DeleteRequest {
  google.protobuf.Any payload = 1 [(validate.rules).any = {required: true}];
}

message DeleteResponse {}

message GetRequest {
  google.protobuf.Any search = 1 [(validate.rules).any = {required: true}];
  linka.cloud.protofilters.Expression filter = 2;
  Paging paging = 3;
  google.protobuf.FieldMask field_mask = 4;
  bool reverse = 5;
}

message GetResponse {
  repeated google.protobuf.Any results = 1;
  PagingInfo paging = 2;
}

message TxRequest {
  oneof request {
    option (validate.required) = true;
    GetRequest get = 1;
    SetRequest set = 2;
    DeleteRequest delete = 3;
    google.protobuf.BoolValue commit = 4;
  }
}

message TxResponse {
  oneof response {
    GetResponse get = 1;
    SetResponse set = 2;
    DeleteResponse delete = 3;
    CommitResponse commit = 4;
  }
}

message NextSeqRequest {
  string key = 1;
}

message NextSeqResponse {
  uint64 seq = 1;
}

message CommitResponse {
  google.protobuf.StringValue error = 1;
}

message Paging {
  uint64 limit = 1;
  uint64 offset = 2;
  // token is an optional continuation token, used internally speedup queries
  string token = 3;
}

message PagingInfo {
  bool has_next = 1;
  string token = 2;
}

message WatchRequest {
  google.protobuf.Any search = 1 [(validate.rules).any = {required: true}];
  linka.cloud.protofilters.Expression filter = 2;
}

message WatchEvent {
  enum Type {
    UNKNOWN = 0;
    ENTER = 1;
    LEAVE = 2;
    UPDATE = 3;
  }
  Type type = 1;
  google.protobuf.Any old = 2;
  google.protobuf.Any new = 3;
}

message RegisterRequest {
  google.protobuf.FileDescriptorProto file = 1;
}

message RegisterResponse {}

message DescriptorsRequest {}

message DescriptorsResponse {
  repeated google.protobuf.DescriptorProto results = 1;
}

message FileDescriptorsRequest {}

message FileDescriptorsResponse {
  repeated google.protobuf.FileDescriptorProto results = 1;
}

message MessageDiff {
  map<string, FieldDiff> fields = 1;
}

message FieldDiff {
  google.protobuf.Value from = 1;
  google.protobuf.Value to = 2;
}
