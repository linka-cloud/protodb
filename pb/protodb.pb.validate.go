// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/protodb.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PutRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PutRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPayload() == nil {
		return PutRequestValidationError{
			field:  "Payload",
			reason: "value is required",
		}
	}

	if a := m.GetPayload(); a != nil {

	}

	if v, ok := interface{}(m.GetTTL()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutRequestValidationError{
				field:  "Ttl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PutRequestValidationError is the validation error returned by
// PutRequest.Validate if the designated constraints aren't met.
type PutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRequestValidationError) ErrorName() string { return "PutRequestValidationError" }

// Error satisfies the builtin error interface
func (e PutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRequestValidationError{}

// Validate checks the field values on PutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PutResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PutResponseValidationError is the validation error returned by
// PutResponse.Validate if the designated constraints aren't met.
type PutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutResponseValidationError) ErrorName() string { return "PutResponseValidationError" }

// Error satisfies the builtin error interface
func (e PutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPayload() == nil {
		return DeleteRequestValidationError{
			field:  "Payload",
			reason: "value is required",
		}
	}

	if a := m.GetPayload(); a != nil {

	}

	return nil
}

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSearch() == nil {
		return GetRequestValidationError{
			field:  "Search",
			reason: "value is required",
		}
	}

	if a := m.GetSearch(); a != nil {

	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on TxRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *TxRequest_Get:

		if v, ok := interface{}(m.GetGet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Get",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Put:

		if v, ok := interface{}(m.GetPut()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Put",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Delete:

		if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxRequest_Commit:

		if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxRequestValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return TxRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}

	}

	return nil
}

// TxRequestValidationError is the validation error returned by
// TxRequest.Validate if the designated constraints aren't met.
type TxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxRequestValidationError) ErrorName() string { return "TxRequestValidationError" }

// Error satisfies the builtin error interface
func (e TxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxRequestValidationError{}

// Validate checks the field values on TxResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Response.(type) {

	case *TxResponse_Get:

		if v, ok := interface{}(m.GetGet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Get",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_Put:

		if v, ok := interface{}(m.GetPut()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Put",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TxResponse_Delete:

		if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxResponseValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TxResponseValidationError is the validation error returned by
// TxResponse.Validate if the designated constraints aren't met.
type TxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxResponseValidationError) ErrorName() string { return "TxResponseValidationError" }

// Error satisfies the builtin error interface
func (e TxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxResponseValidationError{}

// Validate checks the field values on Paging with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Paging) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Token

	return nil
}

// PagingValidationError is the validation error returned by Paging.Validate if
// the designated constraints aren't met.
type PagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingValidationError) ErrorName() string { return "PagingValidationError" }

// Error satisfies the builtin error interface
func (e PagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingValidationError{}

// Validate checks the field values on PagingInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PagingInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HasNext

	// no validation rules for Token

	return nil
}

// PagingInfoValidationError is the validation error returned by
// PagingInfo.Validate if the designated constraints aren't met.
type PagingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingInfoValidationError) ErrorName() string { return "PagingInfoValidationError" }

// Error satisfies the builtin error interface
func (e PagingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingInfoValidationError{}

// Validate checks the field values on WatchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WatchRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSearch() == nil {
		return WatchRequestValidationError{
			field:  "Search",
			reason: "value is required",
		}
	}

	if a := m.GetSearch(); a != nil {

	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WatchRequestValidationError is the validation error returned by
// WatchRequest.Validate if the designated constraints aren't met.
type WatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRequestValidationError) ErrorName() string { return "WatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e WatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRequestValidationError{}

// Validate checks the field values on WatchEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *WatchEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetOld()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchEventValidationError{
				field:  "Old",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNew()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchEventValidationError{
				field:  "New",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WatchEventValidationError is the validation error returned by
// WatchEvent.Validate if the designated constraints aren't met.
type WatchEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchEventValidationError) ErrorName() string { return "WatchEventValidationError" }

// Error satisfies the builtin error interface
func (e WatchEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchEventValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegisterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegisterResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}
