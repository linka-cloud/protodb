// Copyright 2021 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package linka.cloud.protodb.internal.replication;

option go_package = "go.linka.cloud/protodb/internal/replication/pb;pb";

import "patch/go.proto";
option (go.lint).all = true;


service ReplicationService {
  rpc Init(InitRequest) returns (stream InitResponse) {}
  rpc Replicate (stream Op) returns (stream Ack) {}
  rpc Alive (stream Ack) returns (stream Ack) {}
  rpc Election (Message) returns (Message) {}
}

message InitRequest {
  uint64 since = 1;
}

message InitResponse {
  uint64 last = 1;
  bytes data = 2;
}

message Op {
  oneof action {
    New new = 1;
    Set set = 2;
    Delete delete = 3;
    Commit commit = 4;
  }
  uint64 id = 5;
}

message New {
  uint64 at = 1;
}

message Set {
  bytes key = 1;
  bytes value = 2;
  uint64 expires_at = 3;
}

message Delete {
  bytes key = 1;
}

message Commit {
  uint64 at = 1;
}

message Ack {}

enum ElectionType {
  NONE = 0;
  SKIP = 1;
  OK = 2;
  ELECTION = 3;
  LEADER = 4;
  // skip is in internal special case where a node announce it will not participate in the election
  // it is used to avoid a node waiting for its known dead peer to participate in the election
}

message Message {
  ElectionType type = 1;
  string name = 2;
  Meta meta = 3;
}

message Meta {
  uint32 grpc_port = 1 [(go.field).name = "GRPCPort"];
  uint64 local_version = 2 [(go.field).name = "LocalVersion"];
  bool is_leader = 3 [(go.field).name = "IsLeader"];
}
