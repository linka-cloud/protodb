// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/replication/raft/pb/raft.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Set with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Set) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Set with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetMultiError, or nil if none found.
func (m *Set) ValidateAll() error {
	return m.validate(true)
}

func (m *Set) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for ExpiresAt

	if len(errors) > 0 {
		return SetMultiError(errors)
	}

	return nil
}

// SetMultiError is an error wrapping multiple validation errors returned by
// Set.ValidateAll() if the designated constraints aren't met.
type SetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMultiError) AllErrors() []error { return m }

// SetValidationError is the validation error returned by Set.Validate if the
// designated constraints aren't met.
type SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValidationError) ErrorName() string { return "SetValidationError" }

// Error satisfies the builtin error interface
func (e SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValidationError{}

// Validate checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Delete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeleteMultiError, or nil if none found.
func (m *Delete) ValidateAll() error {
	return m.validate(true)
}

func (m *Delete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return DeleteMultiError(errors)
	}

	return nil
}

// DeleteMultiError is an error wrapping multiple validation errors returned by
// Delete.ValidateAll() if the designated constraints aren't met.
type DeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMultiError) AllErrors() []error { return m }

// DeleteValidationError is the validation error returned by Delete.Validate if
// the designated constraints aren't met.
type DeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValidationError) ErrorName() string { return "DeleteValidationError" }

// Error satisfies the builtin error interface
func (e DeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValidationError{}

// Validate checks the field values on Entry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entry with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EntryMultiError, or nil if none found.
func (m *Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Entry_Chunk:
		if v == nil {
			err := EntryValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChunk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntryValidationError{
						field:  "Chunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntryValidationError{
						field:  "Chunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntryValidationError{
					field:  "Chunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EntryMultiError(errors)
	}

	return nil
}

// EntryMultiError is an error wrapping multiple validation errors returned by
// Entry.ValidateAll() if the designated constraints aren't met.
type EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntryMultiError) AllErrors() []error { return m }

// EntryValidationError is the validation error returned by Entry.Validate if
// the designated constraints aren't met.
type EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntryValidationError) ErrorName() string { return "EntryValidationError" }

// Error satisfies the builtin error interface
func (e EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntryValidationError{}

// Validate checks the field values on Tx with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tx) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tx with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TxMultiError, or nil if none found.
func (m *Tx) ValidateAll() error {
	return m.validate(true)
}

func (m *Tx) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadAt

	// no validation rules for CommitAt

	for idx, item := range m.GetSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxValidationError{
						field:  fmt.Sprintf("Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxValidationError{
						field:  fmt.Sprintf("Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxValidationError{
					field:  fmt.Sprintf("Sets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeletes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxValidationError{
						field:  fmt.Sprintf("Deletes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxValidationError{
						field:  fmt.Sprintf("Deletes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxValidationError{
					field:  fmt.Sprintf("Deletes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TxMultiError(errors)
	}

	return nil
}

// TxMultiError is an error wrapping multiple validation errors returned by
// Tx.ValidateAll() if the designated constraints aren't met.
type TxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxMultiError) AllErrors() []error { return m }

// TxValidationError is the validation error returned by Tx.Validate if the
// designated constraints aren't met.
type TxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxValidationError) ErrorName() string { return "TxValidationError" }

// Error satisfies the builtin error interface
func (e TxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxValidationError{}

// Validate checks the field values on Chunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chunk with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChunkMultiError, or nil if none found.
func (m *Chunk) ValidateAll() error {
	return m.validate(true)
}

func (m *Chunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for Offset

	// no validation rules for Total

	// no validation rules for Data

	// no validation rules for Discard

	if len(errors) > 0 {
		return ChunkMultiError(errors)
	}

	return nil
}

// ChunkMultiError is an error wrapping multiple validation errors returned by
// Chunk.ValidateAll() if the designated constraints aren't met.
type ChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChunkMultiError) AllErrors() []error { return m }

// ChunkValidationError is the validation error returned by Chunk.Validate if
// the designated constraints aren't met.
type ChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChunkValidationError) ErrorName() string { return "ChunkValidationError" }

// Error satisfies the builtin error interface
func (e ChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChunkValidationError{}
